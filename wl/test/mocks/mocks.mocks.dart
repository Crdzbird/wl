// Mocks generated by Mockito 5.4.4 from annotations
// in wl/test/mocks/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i16;

import 'package:bloc/bloc.dart' as _i27;
import 'package:dio/dio.dart' as _i6;
import 'package:dio/src/adapter.dart' as _i7;
import 'package:dio/src/cancel_token.dart' as _i22;
import 'package:dio/src/dio_mixin.dart' as _i9;
import 'package:dio/src/options.dart' as _i5;
import 'package:dio/src/response.dart' as _i10;
import 'package:dio/src/transformer.dart' as _i8;
import 'package:flutter/foundation.dart' as _i12;
import 'package:flutter/src/widgets/framework.dart' as _i11;
import 'package:flutter/src/widgets/notification_listener.dart' as _i26;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i20;
import 'package:shared_preferences/shared_preferences.dart' as _i28;
import 'package:wl/core/args/dart_define.dart' as _i19;
import 'package:wl/data/datasource/local/preferences.datasource.dart' as _i15;
import 'package:wl/data/datasource/remote/api/dio_contract.dart' as _i23;
import 'package:wl/data/datasource/remote/api/network/dio.client.dart' as _i24;
import 'package:wl/data/datasource/remote/api/network/interceptors/dio.interceptor.dart'
    as _i25;
import 'package:wl/data/models/failure.dart' as _i3;
import 'package:wl/data/models/stadiums/stadium.dart' as _i2;
import 'package:wl/data/models/stadiums/wrapper.dart' as _i4;
import 'package:wl/domain/datasource/local/wrapper.datasource.dart' as _i17;
import 'package:wl/domain/datasource/remote/remote_wrapper.datasource.dart'
    as _i18;
import 'package:wl/domain/wrapper/wrapper.bloc.datasource.dart' as _i21;
import 'package:wl/presentation/dashboard/bloc/filter/filter_cubit.dart'
    as _i29;
import 'package:wl/presentation/dashboard/bloc/poi_bloc.dart' as _i13;
import 'package:wl/presentation/detail/bloc/detail_bloc.dart' as _i14;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeStadium_0 extends _i1.SmartFake implements _i2.Stadium {
  _FakeStadium_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFailure_1 extends _i1.SmartFake implements _i3.Failure {
  _FakeFailure_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWrapper_2 extends _i1.SmartFake implements _i4.Wrapper {
  _FakeWrapper_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRequestOptions_3 extends _i1.SmartFake
    implements _i5.RequestOptions {
  _FakeRequestOptions_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStackTrace_4 extends _i1.SmartFake implements StackTrace {
  _FakeStackTrace_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDioException_5 extends _i1.SmartFake implements _i6.DioException {
  _FakeDioException_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBaseOptions_6 extends _i1.SmartFake implements _i5.BaseOptions {
  _FakeBaseOptions_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHttpClientAdapter_7 extends _i1.SmartFake
    implements _i7.HttpClientAdapter {
  _FakeHttpClientAdapter_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTransformer_8 extends _i1.SmartFake implements _i8.Transformer {
  _FakeTransformer_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeInterceptors_9 extends _i1.SmartFake implements _i9.Interceptors {
  _FakeInterceptors_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_10<T1> extends _i1.SmartFake implements _i10.Response<T1> {
  _FakeResponse_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDio_11 extends _i1.SmartFake implements _i6.Dio {
  _FakeDio_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeInterceptorState_12<T> extends _i1.SmartFake
    implements _i9.InterceptorState<T> {
  _FakeInterceptorState_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWidget_13 extends _i1.SmartFake implements _i11.Widget {
  _FakeWidget_13(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString(
          {_i12.DiagnosticLevel? minLevel = _i12.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeInheritedWidget_14 extends _i1.SmartFake
    implements _i11.InheritedWidget {
  _FakeInheritedWidget_14(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString(
          {_i12.DiagnosticLevel? minLevel = _i12.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeDiagnosticsNode_15 extends _i1.SmartFake
    implements _i12.DiagnosticsNode {
  _FakeDiagnosticsNode_15(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({
    _i12.TextTreeConfiguration? parentConfiguration,
    _i12.DiagnosticLevel? minLevel = _i12.DiagnosticLevel.info,
  }) =>
      super.toString();
}

class _FakePoiState_16 extends _i1.SmartFake implements _i13.PoiState {
  _FakePoiState_16(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDetailState_17 extends _i1.SmartFake implements _i14.DetailState {
  _FakeDetailState_17(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PreferencesDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockPreferencesDataSource extends _i1.Mock
    implements _i15.PreferencesDataSource {
  MockPreferencesDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i16.Future<bool> write<T>({
    required String? key,
    required T? value,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #write,
          [],
          {
            #key: key,
            #value: value,
          },
        ),
        returnValue: _i16.Future<bool>.value(false),
      ) as _i16.Future<bool>);

  @override
  T? read<T>({required String? key}) => (super.noSuchMethod(Invocation.method(
        #read,
        [],
        {#key: key},
      )) as T?);

  @override
  _i16.Future<bool> clearAll() => (super.noSuchMethod(
        Invocation.method(
          #clearAll,
          [],
        ),
        returnValue: _i16.Future<bool>.value(false),
      ) as _i16.Future<bool>);

  @override
  _i16.Future<bool> clear({required String? key}) => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
          {#key: key},
        ),
        returnValue: _i16.Future<bool>.value(false),
      ) as _i16.Future<bool>);
}

/// A class which mocks [WrapperDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockWrapperDataSource extends _i1.Mock implements _i17.WrapperDataSource {
  MockWrapperDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  (_i3.Failure?, _i4.Wrapper?) get() => (super.noSuchMethod(
        Invocation.method(
          #get,
          [],
        ),
        returnValue: (null, null),
      ) as (_i3.Failure?, _i4.Wrapper?));

  @override
  _i16.Future<bool> store({required _i4.Wrapper? wrapper}) =>
      (super.noSuchMethod(
        Invocation.method(
          #store,
          [],
          {#wrapper: wrapper},
        ),
        returnValue: _i16.Future<bool>.value(false),
      ) as _i16.Future<bool>);

  @override
  _i2.Stadium getStadium(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getStadium,
          [id],
        ),
        returnValue: _FakeStadium_0(
          this,
          Invocation.method(
            #getStadium,
            [id],
          ),
        ),
      ) as _i2.Stadium);
}

/// A class which mocks [RemoteWrapperDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteWrapperDataSource extends _i1.Mock
    implements _i18.RemoteWrapperDataSource {
  MockRemoteWrapperDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i16.Future<(_i3.Failure?, _i4.Wrapper?)> fetch() => (super.noSuchMethod(
        Invocation.method(
          #fetch,
          [],
        ),
        returnValue:
            _i16.Future<(_i3.Failure?, _i4.Wrapper?)>.value((null, null)),
      ) as _i16.Future<(_i3.Failure?, _i4.Wrapper?)>);

  @override
  void filter() => super.noSuchMethod(
        Invocation.method(
          #filter,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [DartDefine].
///
/// See the documentation for Mockito's code generation for more information.
class MockDartDefine extends _i1.Mock implements _i19.DartDefine {
  MockDartDefine() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get baseUrl => (super.noSuchMethod(
        Invocation.getter(#baseUrl),
        returnValue: _i20.dummyValue<String>(
          this,
          Invocation.getter(#baseUrl),
        ),
      ) as String);
}

/// A class which mocks [WrapperBlocDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockWrapperBlocDataSource extends _i1.Mock
    implements _i21.WrapperBlocDataSource {
  MockWrapperBlocDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i16.Future<(_i3.Failure?, _i4.Wrapper?)> fetch() => (super.noSuchMethod(
        Invocation.method(
          #fetch,
          [],
        ),
        returnValue:
            _i16.Future<(_i3.Failure?, _i4.Wrapper?)>.value((null, null)),
      ) as _i16.Future<(_i3.Failure?, _i4.Wrapper?)>);

  @override
  _i16.Future<(_i3.Failure, _i4.Wrapper)> filter() => (super.noSuchMethod(
        Invocation.method(
          #filter,
          [],
        ),
        returnValue: _i16.Future<(_i3.Failure, _i4.Wrapper)>.value((
          _FakeFailure_1(
            this,
            Invocation.method(
              #filter,
              [],
            ),
          ),
          _FakeWrapper_2(
            this,
            Invocation.method(
              #filter,
              [],
            ),
          )
        )),
      ) as _i16.Future<(_i3.Failure, _i4.Wrapper)>);

  @override
  _i2.Stadium stadium(String? id) => (super.noSuchMethod(
        Invocation.method(
          #stadium,
          [id],
        ),
        returnValue: _FakeStadium_0(
          this,
          Invocation.method(
            #stadium,
            [id],
          ),
        ),
      ) as _i2.Stadium);
}

/// A class which mocks [DioException].
///
/// See the documentation for Mockito's code generation for more information.
class MockDioException extends _i1.Mock implements _i6.DioException {
  MockDioException() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.RequestOptions get requestOptions => (super.noSuchMethod(
        Invocation.getter(#requestOptions),
        returnValue: _FakeRequestOptions_3(
          this,
          Invocation.getter(#requestOptions),
        ),
      ) as _i5.RequestOptions);

  @override
  _i6.DioExceptionType get type => (super.noSuchMethod(
        Invocation.getter(#type),
        returnValue: _i6.DioExceptionType.connectionTimeout,
      ) as _i6.DioExceptionType);

  @override
  StackTrace get stackTrace => (super.noSuchMethod(
        Invocation.getter(#stackTrace),
        returnValue: _FakeStackTrace_4(
          this,
          Invocation.getter(#stackTrace),
        ),
      ) as StackTrace);

  @override
  _i6.DioException copyWith({
    _i5.RequestOptions? requestOptions,
    _i10.Response<dynamic>? response,
    _i6.DioExceptionType? type,
    Object? error,
    StackTrace? stackTrace,
    String? message,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #copyWith,
          [],
          {
            #requestOptions: requestOptions,
            #response: response,
            #type: type,
            #error: error,
            #stackTrace: stackTrace,
            #message: message,
          },
        ),
        returnValue: _FakeDioException_5(
          this,
          Invocation.method(
            #copyWith,
            [],
            {
              #requestOptions: requestOptions,
              #response: response,
              #type: type,
              #error: error,
              #stackTrace: stackTrace,
              #message: message,
            },
          ),
        ),
      ) as _i6.DioException);
}

/// A class which mocks [Dio].
///
/// See the documentation for Mockito's code generation for more information.
class MockDio extends _i1.Mock implements _i6.Dio {
  MockDio() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.BaseOptions get options => (super.noSuchMethod(
        Invocation.getter(#options),
        returnValue: _FakeBaseOptions_6(
          this,
          Invocation.getter(#options),
        ),
      ) as _i5.BaseOptions);

  @override
  set options(_i5.BaseOptions? _options) => super.noSuchMethod(
        Invocation.setter(
          #options,
          _options,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.HttpClientAdapter get httpClientAdapter => (super.noSuchMethod(
        Invocation.getter(#httpClientAdapter),
        returnValue: _FakeHttpClientAdapter_7(
          this,
          Invocation.getter(#httpClientAdapter),
        ),
      ) as _i7.HttpClientAdapter);

  @override
  set httpClientAdapter(_i7.HttpClientAdapter? _httpClientAdapter) =>
      super.noSuchMethod(
        Invocation.setter(
          #httpClientAdapter,
          _httpClientAdapter,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Transformer get transformer => (super.noSuchMethod(
        Invocation.getter(#transformer),
        returnValue: _FakeTransformer_8(
          this,
          Invocation.getter(#transformer),
        ),
      ) as _i8.Transformer);

  @override
  set transformer(_i8.Transformer? _transformer) => super.noSuchMethod(
        Invocation.setter(
          #transformer,
          _transformer,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.Interceptors get interceptors => (super.noSuchMethod(
        Invocation.getter(#interceptors),
        returnValue: _FakeInterceptors_9(
          this,
          Invocation.getter(#interceptors),
        ),
      ) as _i9.Interceptors);

  @override
  void close({bool? force = false}) => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
          {#force: force},
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i16.Future<_i10.Response<T>> head<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i5.Options? options,
    _i22.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i16.Future<_i10.Response<T>>.value(_FakeResponse_10<T>(
          this,
          Invocation.method(
            #head,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
      ) as _i16.Future<_i10.Response<T>>);

  @override
  _i16.Future<_i10.Response<T>> headUri<T>(
    Uri? uri, {
    Object? data,
    _i5.Options? options,
    _i22.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #headUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i16.Future<_i10.Response<T>>.value(_FakeResponse_10<T>(
          this,
          Invocation.method(
            #headUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
      ) as _i16.Future<_i10.Response<T>>);

  @override
  _i16.Future<_i10.Response<T>> get<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i5.Options? options,
    _i22.CancelToken? cancelToken,
    _i5.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i16.Future<_i10.Response<T>>.value(_FakeResponse_10<T>(
          this,
          Invocation.method(
            #get,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i16.Future<_i10.Response<T>>);

  @override
  _i16.Future<_i10.Response<T>> getUri<T>(
    Uri? uri, {
    Object? data,
    _i5.Options? options,
    _i22.CancelToken? cancelToken,
    _i5.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i16.Future<_i10.Response<T>>.value(_FakeResponse_10<T>(
          this,
          Invocation.method(
            #getUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i16.Future<_i10.Response<T>>);

  @override
  _i16.Future<_i10.Response<T>> post<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i5.Options? options,
    _i22.CancelToken? cancelToken,
    _i5.ProgressCallback? onSendProgress,
    _i5.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i16.Future<_i10.Response<T>>.value(_FakeResponse_10<T>(
          this,
          Invocation.method(
            #post,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i16.Future<_i10.Response<T>>);

  @override
  _i16.Future<_i10.Response<T>> postUri<T>(
    Uri? uri, {
    Object? data,
    _i5.Options? options,
    _i22.CancelToken? cancelToken,
    _i5.ProgressCallback? onSendProgress,
    _i5.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #postUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i16.Future<_i10.Response<T>>.value(_FakeResponse_10<T>(
          this,
          Invocation.method(
            #postUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i16.Future<_i10.Response<T>>);

  @override
  _i16.Future<_i10.Response<T>> put<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i5.Options? options,
    _i22.CancelToken? cancelToken,
    _i5.ProgressCallback? onSendProgress,
    _i5.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i16.Future<_i10.Response<T>>.value(_FakeResponse_10<T>(
          this,
          Invocation.method(
            #put,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i16.Future<_i10.Response<T>>);

  @override
  _i16.Future<_i10.Response<T>> putUri<T>(
    Uri? uri, {
    Object? data,
    _i5.Options? options,
    _i22.CancelToken? cancelToken,
    _i5.ProgressCallback? onSendProgress,
    _i5.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i16.Future<_i10.Response<T>>.value(_FakeResponse_10<T>(
          this,
          Invocation.method(
            #putUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i16.Future<_i10.Response<T>>);

  @override
  _i16.Future<_i10.Response<T>> patch<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i5.Options? options,
    _i22.CancelToken? cancelToken,
    _i5.ProgressCallback? onSendProgress,
    _i5.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i16.Future<_i10.Response<T>>.value(_FakeResponse_10<T>(
          this,
          Invocation.method(
            #patch,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i16.Future<_i10.Response<T>>);

  @override
  _i16.Future<_i10.Response<T>> patchUri<T>(
    Uri? uri, {
    Object? data,
    _i5.Options? options,
    _i22.CancelToken? cancelToken,
    _i5.ProgressCallback? onSendProgress,
    _i5.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patchUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i16.Future<_i10.Response<T>>.value(_FakeResponse_10<T>(
          this,
          Invocation.method(
            #patchUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i16.Future<_i10.Response<T>>);

  @override
  _i16.Future<_i10.Response<T>> delete<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i5.Options? options,
    _i22.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i16.Future<_i10.Response<T>>.value(_FakeResponse_10<T>(
          this,
          Invocation.method(
            #delete,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
      ) as _i16.Future<_i10.Response<T>>);

  @override
  _i16.Future<_i10.Response<T>> deleteUri<T>(
    Uri? uri, {
    Object? data,
    _i5.Options? options,
    _i22.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i16.Future<_i10.Response<T>>.value(_FakeResponse_10<T>(
          this,
          Invocation.method(
            #deleteUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
      ) as _i16.Future<_i10.Response<T>>);

  @override
  _i16.Future<_i10.Response<dynamic>> download(
    String? urlPath,
    dynamic savePath, {
    _i5.ProgressCallback? onReceiveProgress,
    Map<String, dynamic>? queryParameters,
    _i22.CancelToken? cancelToken,
    bool? deleteOnError = true,
    String? lengthHeader = r'content-length',
    Object? data,
    _i5.Options? options,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #download,
          [
            urlPath,
            savePath,
          ],
          {
            #onReceiveProgress: onReceiveProgress,
            #queryParameters: queryParameters,
            #cancelToken: cancelToken,
            #deleteOnError: deleteOnError,
            #lengthHeader: lengthHeader,
            #data: data,
            #options: options,
          },
        ),
        returnValue:
            _i16.Future<_i10.Response<dynamic>>.value(_FakeResponse_10<dynamic>(
          this,
          Invocation.method(
            #download,
            [
              urlPath,
              savePath,
            ],
            {
              #onReceiveProgress: onReceiveProgress,
              #queryParameters: queryParameters,
              #cancelToken: cancelToken,
              #deleteOnError: deleteOnError,
              #lengthHeader: lengthHeader,
              #data: data,
              #options: options,
            },
          ),
        )),
      ) as _i16.Future<_i10.Response<dynamic>>);

  @override
  _i16.Future<_i10.Response<dynamic>> downloadUri(
    Uri? uri,
    dynamic savePath, {
    _i5.ProgressCallback? onReceiveProgress,
    _i22.CancelToken? cancelToken,
    bool? deleteOnError = true,
    String? lengthHeader = r'content-length',
    Object? data,
    _i5.Options? options,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #downloadUri,
          [
            uri,
            savePath,
          ],
          {
            #onReceiveProgress: onReceiveProgress,
            #cancelToken: cancelToken,
            #deleteOnError: deleteOnError,
            #lengthHeader: lengthHeader,
            #data: data,
            #options: options,
          },
        ),
        returnValue:
            _i16.Future<_i10.Response<dynamic>>.value(_FakeResponse_10<dynamic>(
          this,
          Invocation.method(
            #downloadUri,
            [
              uri,
              savePath,
            ],
            {
              #onReceiveProgress: onReceiveProgress,
              #cancelToken: cancelToken,
              #deleteOnError: deleteOnError,
              #lengthHeader: lengthHeader,
              #data: data,
              #options: options,
            },
          ),
        )),
      ) as _i16.Future<_i10.Response<dynamic>>);

  @override
  _i16.Future<_i10.Response<T>> request<T>(
    String? url, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i22.CancelToken? cancelToken,
    _i5.Options? options,
    _i5.ProgressCallback? onSendProgress,
    _i5.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #request,
          [url],
          {
            #data: data,
            #queryParameters: queryParameters,
            #cancelToken: cancelToken,
            #options: options,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i16.Future<_i10.Response<T>>.value(_FakeResponse_10<T>(
          this,
          Invocation.method(
            #request,
            [url],
            {
              #data: data,
              #queryParameters: queryParameters,
              #cancelToken: cancelToken,
              #options: options,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i16.Future<_i10.Response<T>>);

  @override
  _i16.Future<_i10.Response<T>> requestUri<T>(
    Uri? uri, {
    Object? data,
    _i22.CancelToken? cancelToken,
    _i5.Options? options,
    _i5.ProgressCallback? onSendProgress,
    _i5.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #requestUri,
          [uri],
          {
            #data: data,
            #cancelToken: cancelToken,
            #options: options,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i16.Future<_i10.Response<T>>.value(_FakeResponse_10<T>(
          this,
          Invocation.method(
            #requestUri,
            [uri],
            {
              #data: data,
              #cancelToken: cancelToken,
              #options: options,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i16.Future<_i10.Response<T>>);

  @override
  _i16.Future<_i10.Response<T>> fetch<T>(_i5.RequestOptions? requestOptions) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetch,
          [requestOptions],
        ),
        returnValue: _i16.Future<_i10.Response<T>>.value(_FakeResponse_10<T>(
          this,
          Invocation.method(
            #fetch,
            [requestOptions],
          ),
        )),
      ) as _i16.Future<_i10.Response<T>>);
}

/// A class which mocks [DioContract].
///
/// See the documentation for Mockito's code generation for more information.
class MockDioContract extends _i1.Mock implements _i23.DioContract {
  MockDioContract() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void setup() => super.noSuchMethod(
        Invocation.method(
          #setup,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i16.Future<_i10.Response<Object>> get(
    String? path, {
    Map<String, dynamic>? queryParameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [path],
          {#queryParameters: queryParameters},
        ),
        returnValue:
            _i16.Future<_i10.Response<Object>>.value(_FakeResponse_10<Object>(
          this,
          Invocation.method(
            #get,
            [path],
            {#queryParameters: queryParameters},
          ),
        )),
      ) as _i16.Future<_i10.Response<Object>>);

  @override
  _i16.Future<_i10.Response<Object>> post(
    String? path, {
    Map<String, dynamic>? queryParameters,
    Object? data,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [path],
          {
            #queryParameters: queryParameters,
            #data: data,
          },
        ),
        returnValue:
            _i16.Future<_i10.Response<Object>>.value(_FakeResponse_10<Object>(
          this,
          Invocation.method(
            #post,
            [path],
            {
              #queryParameters: queryParameters,
              #data: data,
            },
          ),
        )),
      ) as _i16.Future<_i10.Response<Object>>);

  @override
  _i16.Future<_i10.Response<Object>> put(
    String? path, {
    Map<String, dynamic>? queryParameters,
    Object? data,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [path],
          {
            #queryParameters: queryParameters,
            #data: data,
          },
        ),
        returnValue:
            _i16.Future<_i10.Response<Object>>.value(_FakeResponse_10<Object>(
          this,
          Invocation.method(
            #put,
            [path],
            {
              #queryParameters: queryParameters,
              #data: data,
            },
          ),
        )),
      ) as _i16.Future<_i10.Response<Object>>);

  @override
  _i16.Future<_i10.Response<Object>> delete(
    String? path, {
    Map<String, dynamic>? queryParameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [path],
          {#queryParameters: queryParameters},
        ),
        returnValue:
            _i16.Future<_i10.Response<Object>>.value(_FakeResponse_10<Object>(
          this,
          Invocation.method(
            #delete,
            [path],
            {#queryParameters: queryParameters},
          ),
        )),
      ) as _i16.Future<_i10.Response<Object>>);

  @override
  _i16.Future<_i10.Response<Object>> patch(
    String? path, {
    Map<String, dynamic>? queryParameters,
    Object? data,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [path],
          {
            #queryParameters: queryParameters,
            #data: data,
          },
        ),
        returnValue:
            _i16.Future<_i10.Response<Object>>.value(_FakeResponse_10<Object>(
          this,
          Invocation.method(
            #patch,
            [path],
            {
              #queryParameters: queryParameters,
              #data: data,
            },
          ),
        )),
      ) as _i16.Future<_i10.Response<Object>>);
}

/// A class which mocks [DioClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockDioClient extends _i1.Mock implements _i24.DioClient {
  MockDioClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Dio get dio => (super.noSuchMethod(
        Invocation.getter(#dio),
        returnValue: _FakeDio_11(
          this,
          Invocation.getter(#dio),
        ),
      ) as _i6.Dio);

  @override
  void setup() => super.noSuchMethod(
        Invocation.method(
          #setup,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i16.Future<_i10.Response<Object>> delete(
    String? path, {
    Map<String, dynamic>? queryParameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [path],
          {#queryParameters: queryParameters},
        ),
        returnValue:
            _i16.Future<_i10.Response<Object>>.value(_FakeResponse_10<Object>(
          this,
          Invocation.method(
            #delete,
            [path],
            {#queryParameters: queryParameters},
          ),
        )),
      ) as _i16.Future<_i10.Response<Object>>);

  @override
  _i16.Future<_i10.Response<Object>> get(
    String? path, {
    Map<String, dynamic>? queryParameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [path],
          {#queryParameters: queryParameters},
        ),
        returnValue:
            _i16.Future<_i10.Response<Object>>.value(_FakeResponse_10<Object>(
          this,
          Invocation.method(
            #get,
            [path],
            {#queryParameters: queryParameters},
          ),
        )),
      ) as _i16.Future<_i10.Response<Object>>);

  @override
  _i16.Future<_i10.Response<Object>> patch(
    String? path, {
    Map<String, dynamic>? queryParameters,
    Object? data,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [path],
          {
            #queryParameters: queryParameters,
            #data: data,
          },
        ),
        returnValue:
            _i16.Future<_i10.Response<Object>>.value(_FakeResponse_10<Object>(
          this,
          Invocation.method(
            #patch,
            [path],
            {
              #queryParameters: queryParameters,
              #data: data,
            },
          ),
        )),
      ) as _i16.Future<_i10.Response<Object>>);

  @override
  _i16.Future<_i10.Response<Object>> post(
    String? path, {
    Map<String, dynamic>? queryParameters,
    Object? data,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [path],
          {
            #queryParameters: queryParameters,
            #data: data,
          },
        ),
        returnValue:
            _i16.Future<_i10.Response<Object>>.value(_FakeResponse_10<Object>(
          this,
          Invocation.method(
            #post,
            [path],
            {
              #queryParameters: queryParameters,
              #data: data,
            },
          ),
        )),
      ) as _i16.Future<_i10.Response<Object>>);

  @override
  _i16.Future<_i10.Response<Object>> put(
    String? path, {
    Map<String, dynamic>? queryParameters,
    Object? data,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [path],
          {
            #queryParameters: queryParameters,
            #data: data,
          },
        ),
        returnValue:
            _i16.Future<_i10.Response<Object>>.value(_FakeResponse_10<Object>(
          this,
          Invocation.method(
            #put,
            [path],
            {
              #queryParameters: queryParameters,
              #data: data,
            },
          ),
        )),
      ) as _i16.Future<_i10.Response<Object>>);
}

/// A class which mocks [DioInterceptor].
///
/// See the documentation for Mockito's code generation for more information.
class MockDioInterceptor extends _i1.Mock implements _i25.DioInterceptor {
  MockDioInterceptor() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i16.Future<void> onRequest(
    _i5.RequestOptions? options,
    _i9.RequestInterceptorHandler? handler,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #onRequest,
          [
            options,
            handler,
          ],
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);

  @override
  void onResponse(
    _i10.Response<dynamic>? response,
    _i9.ResponseInterceptorHandler? handler,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onResponse,
          [
            response,
            handler,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    _i6.DioException? err,
    _i9.ErrorInterceptorHandler? handler,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            err,
            handler,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ErrorInterceptorHandler].
///
/// See the documentation for Mockito's code generation for more information.
class MockErrorInterceptorHandler extends _i1.Mock
    implements _i9.ErrorInterceptorHandler {
  MockErrorInterceptorHandler() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i16.Future<_i9.InterceptorState<dynamic>> get future => (super.noSuchMethod(
        Invocation.getter(#future),
        returnValue: _i16.Future<_i9.InterceptorState<dynamic>>.value(
            _FakeInterceptorState_12<dynamic>(
          this,
          Invocation.getter(#future),
        )),
      ) as _i16.Future<_i9.InterceptorState<dynamic>>);

  @override
  bool get isCompleted => (super.noSuchMethod(
        Invocation.getter(#isCompleted),
        returnValue: false,
      ) as bool);

  @override
  void next(_i6.DioException? error) => super.noSuchMethod(
        Invocation.method(
          #next,
          [error],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void resolve(_i10.Response<dynamic>? response) => super.noSuchMethod(
        Invocation.method(
          #resolve,
          [response],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void reject(_i6.DioException? error) => super.noSuchMethod(
        Invocation.method(
          #reject,
          [error],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [BuildContext].
///
/// See the documentation for Mockito's code generation for more information.
class MockBuildContext extends _i1.Mock implements _i11.BuildContext {
  @override
  _i11.Widget get widget => (super.noSuchMethod(
        Invocation.getter(#widget),
        returnValue: _FakeWidget_13(
          this,
          Invocation.getter(#widget),
        ),
        returnValueForMissingStub: _FakeWidget_13(
          this,
          Invocation.getter(#widget),
        ),
      ) as _i11.Widget);

  @override
  bool get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get debugDoingBuild => (super.noSuchMethod(
        Invocation.getter(#debugDoingBuild),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i11.InheritedWidget dependOnInheritedElement(
    _i11.InheritedElement? ancestor, {
    Object? aspect,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #dependOnInheritedElement,
          [ancestor],
          {#aspect: aspect},
        ),
        returnValue: _FakeInheritedWidget_14(
          this,
          Invocation.method(
            #dependOnInheritedElement,
            [ancestor],
            {#aspect: aspect},
          ),
        ),
        returnValueForMissingStub: _FakeInheritedWidget_14(
          this,
          Invocation.method(
            #dependOnInheritedElement,
            [ancestor],
            {#aspect: aspect},
          ),
        ),
      ) as _i11.InheritedWidget);

  @override
  void visitAncestorElements(_i11.ConditionalElementVisitor? visitor) =>
      super.noSuchMethod(
        Invocation.method(
          #visitAncestorElements,
          [visitor],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void visitChildElements(_i11.ElementVisitor? visitor) => super.noSuchMethod(
        Invocation.method(
          #visitChildElements,
          [visitor],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispatchNotification(_i26.Notification? notification) =>
      super.noSuchMethod(
        Invocation.method(
          #dispatchNotification,
          [notification],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i12.DiagnosticsNode describeElement(
    String? name, {
    _i12.DiagnosticsTreeStyle? style = _i12.DiagnosticsTreeStyle.errorProperty,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeElement,
          [name],
          {#style: style},
        ),
        returnValue: _FakeDiagnosticsNode_15(
          this,
          Invocation.method(
            #describeElement,
            [name],
            {#style: style},
          ),
        ),
        returnValueForMissingStub: _FakeDiagnosticsNode_15(
          this,
          Invocation.method(
            #describeElement,
            [name],
            {#style: style},
          ),
        ),
      ) as _i12.DiagnosticsNode);

  @override
  _i12.DiagnosticsNode describeWidget(
    String? name, {
    _i12.DiagnosticsTreeStyle? style = _i12.DiagnosticsTreeStyle.errorProperty,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeWidget,
          [name],
          {#style: style},
        ),
        returnValue: _FakeDiagnosticsNode_15(
          this,
          Invocation.method(
            #describeWidget,
            [name],
            {#style: style},
          ),
        ),
        returnValueForMissingStub: _FakeDiagnosticsNode_15(
          this,
          Invocation.method(
            #describeWidget,
            [name],
            {#style: style},
          ),
        ),
      ) as _i12.DiagnosticsNode);

  @override
  List<_i12.DiagnosticsNode> describeMissingAncestor(
          {required Type? expectedAncestorType}) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeMissingAncestor,
          [],
          {#expectedAncestorType: expectedAncestorType},
        ),
        returnValue: <_i12.DiagnosticsNode>[],
        returnValueForMissingStub: <_i12.DiagnosticsNode>[],
      ) as List<_i12.DiagnosticsNode>);

  @override
  _i12.DiagnosticsNode describeOwnershipChain(String? name) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeOwnershipChain,
          [name],
        ),
        returnValue: _FakeDiagnosticsNode_15(
          this,
          Invocation.method(
            #describeOwnershipChain,
            [name],
          ),
        ),
        returnValueForMissingStub: _FakeDiagnosticsNode_15(
          this,
          Invocation.method(
            #describeOwnershipChain,
            [name],
          ),
        ),
      ) as _i12.DiagnosticsNode);
}

/// A class which mocks [PoiBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockPoiBloc extends _i1.Mock implements _i13.PoiBloc {
  @override
  _i13.PoiState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakePoiState_16(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakePoiState_16(
          this,
          Invocation.getter(#state),
        ),
      ) as _i13.PoiState);

  @override
  _i16.Stream<_i13.PoiState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i16.Stream<_i13.PoiState>.empty(),
        returnValueForMissingStub: _i16.Stream<_i13.PoiState>.empty(),
      ) as _i16.Stream<_i13.PoiState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i16.Future<void> filterPois(String? query) => (super.noSuchMethod(
        Invocation.method(
          #filterPois,
          [query],
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);

  @override
  _i16.Future<void> fetchPois() => (super.noSuchMethod(
        Invocation.method(
          #fetchPois,
          [],
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);

  @override
  _i16.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);

  @override
  void add(_i13.PoiEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i13.PoiEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i13.PoiState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i13.PoiEvent>(
    _i27.EventHandler<E, _i13.PoiState>? handler, {
    _i27.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i27.Transition<_i13.PoiEvent, _i13.PoiState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i27.Change<_i13.PoiState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [SharedPreferences].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPreferences extends _i1.Mock implements _i28.SharedPreferences {
  @override
  Set<String> getKeys() => (super.noSuchMethod(
        Invocation.method(
          #getKeys,
          [],
        ),
        returnValue: <String>{},
        returnValueForMissingStub: <String>{},
      ) as Set<String>);

  @override
  Object? get(String? key) => (super.noSuchMethod(
        Invocation.method(
          #get,
          [key],
        ),
        returnValueForMissingStub: null,
      ) as Object?);

  @override
  bool? getBool(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getBool,
          [key],
        ),
        returnValueForMissingStub: null,
      ) as bool?);

  @override
  int? getInt(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getInt,
          [key],
        ),
        returnValueForMissingStub: null,
      ) as int?);

  @override
  double? getDouble(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getDouble,
          [key],
        ),
        returnValueForMissingStub: null,
      ) as double?);

  @override
  String? getString(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getString,
          [key],
        ),
        returnValueForMissingStub: null,
      ) as String?);

  @override
  bool containsKey(String? key) => (super.noSuchMethod(
        Invocation.method(
          #containsKey,
          [key],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  List<String>? getStringList(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getStringList,
          [key],
        ),
        returnValueForMissingStub: null,
      ) as List<String>?);

  @override
  _i16.Future<bool> setBool(
    String? key,
    bool? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setBool,
          [
            key,
            value,
          ],
        ),
        returnValue: _i16.Future<bool>.value(false),
        returnValueForMissingStub: _i16.Future<bool>.value(false),
      ) as _i16.Future<bool>);

  @override
  _i16.Future<bool> setInt(
    String? key,
    int? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setInt,
          [
            key,
            value,
          ],
        ),
        returnValue: _i16.Future<bool>.value(false),
        returnValueForMissingStub: _i16.Future<bool>.value(false),
      ) as _i16.Future<bool>);

  @override
  _i16.Future<bool> setDouble(
    String? key,
    double? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setDouble,
          [
            key,
            value,
          ],
        ),
        returnValue: _i16.Future<bool>.value(false),
        returnValueForMissingStub: _i16.Future<bool>.value(false),
      ) as _i16.Future<bool>);

  @override
  _i16.Future<bool> setString(
    String? key,
    String? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setString,
          [
            key,
            value,
          ],
        ),
        returnValue: _i16.Future<bool>.value(false),
        returnValueForMissingStub: _i16.Future<bool>.value(false),
      ) as _i16.Future<bool>);

  @override
  _i16.Future<bool> setStringList(
    String? key,
    List<String>? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setStringList,
          [
            key,
            value,
          ],
        ),
        returnValue: _i16.Future<bool>.value(false),
        returnValueForMissingStub: _i16.Future<bool>.value(false),
      ) as _i16.Future<bool>);

  @override
  _i16.Future<bool> remove(String? key) => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [key],
        ),
        returnValue: _i16.Future<bool>.value(false),
        returnValueForMissingStub: _i16.Future<bool>.value(false),
      ) as _i16.Future<bool>);

  @override
  _i16.Future<bool> commit() => (super.noSuchMethod(
        Invocation.method(
          #commit,
          [],
        ),
        returnValue: _i16.Future<bool>.value(false),
        returnValueForMissingStub: _i16.Future<bool>.value(false),
      ) as _i16.Future<bool>);

  @override
  _i16.Future<bool> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i16.Future<bool>.value(false),
        returnValueForMissingStub: _i16.Future<bool>.value(false),
      ) as _i16.Future<bool>);

  @override
  _i16.Future<void> reload() => (super.noSuchMethod(
        Invocation.method(
          #reload,
          [],
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);
}

/// A class which mocks [FilterCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockFilterCubit extends _i1.Mock implements _i29.FilterCubit {
  @override
  String get query => (super.noSuchMethod(
        Invocation.getter(#query),
        returnValue: _i20.dummyValue<String>(
          this,
          Invocation.getter(#query),
        ),
        returnValueForMissingStub: _i20.dummyValue<String>(
          this,
          Invocation.getter(#query),
        ),
      ) as String);

  @override
  String get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i20.dummyValue<String>(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _i20.dummyValue<String>(
          this,
          Invocation.getter(#state),
        ),
      ) as String);

  @override
  _i16.Stream<String> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i16.Stream<String>.empty(),
        returnValueForMissingStub: _i16.Stream<String>.empty(),
      ) as _i16.Stream<String>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void onChangeQuery(String? query) => super.noSuchMethod(
        Invocation.method(
          #onChangeQuery,
          [query],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(String? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i27.Change<String>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i16.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);
}

/// A class which mocks [DetailBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockDetailBloc extends _i1.Mock implements _i14.DetailBloc {
  @override
  _i14.DetailState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeDetailState_17(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeDetailState_17(
          this,
          Invocation.getter(#state),
        ),
      ) as _i14.DetailState);

  @override
  _i16.Stream<_i14.DetailState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i16.Stream<_i14.DetailState>.empty(),
        returnValueForMissingStub: _i16.Stream<_i14.DetailState>.empty(),
      ) as _i16.Stream<_i14.DetailState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i16.Future<void> fetchStadium(String? id) => (super.noSuchMethod(
        Invocation.method(
          #fetchStadium,
          [id],
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);

  @override
  void add(_i14.DetailEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i14.DetailEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i14.DetailState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i14.DetailEvent>(
    _i27.EventHandler<E, _i14.DetailState>? handler, {
    _i27.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i27.Transition<_i14.DetailEvent, _i14.DetailState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i16.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);

  @override
  void onChange(_i27.Change<_i14.DetailState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
